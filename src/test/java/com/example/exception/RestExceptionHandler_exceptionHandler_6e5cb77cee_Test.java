// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-4

package com.example.exception;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class RestExceptionHandler_exceptionHandler_6e5cb77cee_Test {

    @InjectMocks
    private RestExceptionHandler restExceptionHandler;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testExceptionHandler_withException() {
        Exception ex = new Exception("Test Exception");
        ResponseEntity<ErrorResponse> responseEntity = restExceptionHandler.exceptionHandler(ex);

        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
        assertEquals(HttpStatus.BAD_REQUEST.value(), responseEntity.getBody().getErrorCode());
        assertEquals("The request could not be understood by the server due to malformed syntax.", responseEntity.getBody().getMessage());
    }

    @Test
    public void testExceptionHandler_withoutException() {
        ResponseEntity<ErrorResponse> responseEntity = restExceptionHandler.exceptionHandler(null);

        assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());
        assertEquals(HttpStatus.BAD_REQUEST.value(), responseEntity.getBody().getErrorCode());
        assertEquals("The request could not be understood by the server due to malformed syntax.", responseEntity.getBody().getMessage());
    }
}
